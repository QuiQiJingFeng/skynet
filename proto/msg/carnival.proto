package msg.carnival;

enum Result {
    success = 0;
    failure = 1;
    time_is_not = 2;
    cant_meet_condition = 3;
    already_taken = 4;
    cant_use_this_key = 5;
    this_key_not_exist = 6;
    out_of_date = 7;
    other_player_taken = 8;
    no_this_batch = 9;
    bag_full = 10;
    not_in_carnival = 11;
    server_error = 12;
    channel_error = 13;
    time_error = 14;
    already_prayer = 15; // 已经祈祷过了
    already_alchemy = 16; // 已经炼金过了
    prayer_error = 17;      // 请选择祈祷类型
    alchemy_error = 18;     // 请选择炼金类型
    not_enough_blood_diamond = 19;
    not_enough_credit = 20;
    not_enough_soul = 21;
    exchange_times_limit = 22;
}

message RewardInfo
{
    required int32 reward_type = 1;
    required int32 param1  = 2;
    required int32 param2 = 3;
}

message RewardList
{
    required int32 reward_group_id = 1;
    repeated RewardInfo reward_info = 2;
}

message CollectStep
{
    repeated int32 step_info = 1;
}

message CarnivalConfig
{
    required string key = 1;
    required string name = 2;
    required string desc = 3;
    required int32 carnival_type = 4;

    optional int32 need_type = 5;
    optional uint32 begin_time = 6;
    optional uint32 end_time = 7;
    optional uint32 reward_time = 8;

    optional string tab_icon = 9;
    optional int32 pos = 10;

    repeated RewardList reward_list = 11;
    repeated CollectStep collect_step = 12;

    repeated int32 visible_style = 13;

    optional int32 extra_num1 = 14;
    optional int32 extra_num2 = 15;
    repeated double mult_num1 = 16;
    repeated double mult_num2 = 17;
    repeated string mult_str1 = 18;
    repeated string mult_str2 = 19;
}

//活动表内容
message QueryCarnivalConfig
{
}

message QueryCarnivalConfigRet
{
    repeated CarnivalConfig config = 1;
}

//狂欢活动数据
message QueryCarnivalInfo
{
}

message QueryCarnivalUnionData
{
    required string key = 1;
}

message QueryCarnivalUnionDataRet
{
    required string key = 1;
    repeated int32 ids = 2;
    repeated int32 num = 3;
}

message CarnivalInfo
{
    required string key = 1;
    optional double cur_value = 2;
    repeated double cur_value_multi = 3;
    repeated int32 collect_info = 4;
    repeated int32 step_reward = 5;
    repeated int32 step_flag = 6;
    repeated int32 exchange_record = 7;
}

message UpdateCarnivalInfo
{
    required string key = 1;
    optional int32 new_value = 2;
    optional int32 need_type = 3;
    optional uint32 end_time = 4;
}

message UpdateCarnivalInfoRet
{
    repeated UpdateCarnivalInfo carnival_info = 1;
}

//活动数据
message QueryCarnivalInfoRet
{
    repeated CarnivalInfo carnival_info = 1;
}

//领取狂欢活动奖品
message TakeCarnivalReward
{
    required string key = 1;
    required int32 step = 2;
    required int32 exchange_id = 3;
}

message TakeCarnivalRewardRet
{
    required Result result = 1;
    optional string key = 2;
    optional int32 step = 3;
    required int32 exchange_id = 4;
    required int32 exchange_mercenary_id = 5;
    required int32 exchange_soul_stone_num = 6;
}

message VoteCarnival
{
    required int32 index = 1;
    required string key = 2;
}

message VoteCarnivalRet
{
    required Result result = 1;
    required int32 index = 2;
    repeated int32 cur_value_multi = 3;
    required string key = 4;
}

message TakeLottery
{
    required string key = 1;
}

message LotteryLog
{
    required string user_name = 1;
    required int32 template_id = 2;
    required int32 num = 3;
    required uint32 open_time = 4;
}

message TakeLotteryRet
{
    required Result result = 1;
    required string key = 2;
    optional int32 bd_num = 3;
    repeated LotteryLog log = 4;
}

message TakeEvolution
{
    required string key = 1;
    required uint32 formula_id = 2;
    repeated int32 mercenary_id_list = 3;
}

message TakeEvolutionRet
{
    required Result result = 1;
    optional int32 formula_id = 2;
    repeated int32 mercenary_id_list = 3;
}

message BuyLimitePackage
{
    required int32 productId = 1;
    required string key = 2;
}

message BuyLimitePackageRet
{
    required Result result = 1;
    required int32 over_time = 2;
}

message QueryLimitePackage
{
    
}

message QueryLimitePackageRet
{
    required Result result = 1;
    required int32 show_index = 2;
    required int32 over_time = 3;
    required int32 is_come_in = 4;
}

message UpdateLimitePackageInfo
{
    required string key = 1;
    required int32 is_come_in = 2;
}


message UpdateLimitePackageInfoRet
{
    optional int32 show_index = 1; //是否要显示礼包下标
    optional int32 over_time = 2; //本次礼包结束时间
    optional int32 is_come_in = 3; //是否进入过礼包
}
